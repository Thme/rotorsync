#!/bin/bash
set -e
#All "heredocs"
usage() {
cat <<EOF
	Command-line options:
	--cfg                Generate a clean configuration file: "/etc/rotorsync.conf". This overwrites the existing rotorsync.conf if present.

	--set-dev-labels		[ext(1,2,3) filesystems only!] Set partition labels for root home and any other mounted 
								filesystems that are required to boot(any /boot /var or other root related partitions). 
								This option drops into a menu. These labels are used for auto-detection when running 
								the "--recovery-menu" option from a live medium
	--find 					Search for and mount partitions accourding to thier "labels" as set by the "--set-dev-labels"
								option.
	--copy-me, -c
	--recovery-menu		If the partition where snapshots are kept is mounted this option will enter the
								snapshot directory then drops into the recovey menu prompt. This option is intended for use 
								only on live CD's/USB's. You can copy it with
								
	-f, --force				Force rotorsync to take a snapshot or update the existing one (if one was created earlier today) 
								ignoring the schedule.(this will count	as a regular run and the next will follow this run 
								according to your the setting "HOWOFTEN=" 

	-v							print verbose output for rsync and rm 
EOF
}
f_rotorsync_conf() {
cat <<EOF
#ROTORSYNC CONFIGURATION
#Main settings (required)
Username=
BACKUPTO=
HOWMANY=
HOWOFTEN=
#Optional settings
BOOTDELAY=
MOUNTOPTS=
SUBDIR=
EOF
}
f_methods() {
cat <<EOF
RESTORE METHODS:
		"rsync-optimized" utilizes rsync's --del (--delete-during) option to remove
	conflicting files between the snapshot and existing root. This method is the 
	fastest and is very successful at restoring under most conditions. 
	
		"full-restore" this method is slower but will remove the entire root 
	tree (except /home) before running rsync to	restore the chosen snapshot. It is 
	slightly more effective than "rsync-optimized" and should only be used as a 
	second try if the "rsync-optimized" failed 
	
		"format-and-restore"(not implemented yet) WARNING: This option will format the chosen root 
	partition to a selected filesystem then perform the restore followed by regenerating 
	/etc/fstab and updating grub.cfg (if using syslinux you'll have to manually 
	update it before trying to boot.)
EOF
}
#dotfiles and root exclude lists for rsync
f_xlst() {
cat <<EOF
- .gvfs
- .dbus/**
- .local/share/Trash/**
- .thumbnails/**
- .cache/**
- .opera/cache/**
EOF
}
f_rxlst() {
cat <<EOF
- dev/*
- proc/*
- mnt/*
- tmp/*
- media/*
- run/*
- sys/*
- var/lib/pacman/*
- var/cache/*
EOF
}
if [[ -f /etc/rotorsync.conf ]] ; then 
	source /etc/rotorsync.conf
elif [[ ! -f /etc/rotorsync.conf ||  ]]
	echo '/etc/rotrorsync.conf not found generating one...'
	f_rotorsync_conf	>	/etc/rotorsync.conf
	echo 'DONE! Now please edit /etc/rotorsync.conf before continuing!'
	exit 0
fi
if [[ $1 =~ --copy-me || $1 =~ -c  ]] ; then
	if [[ -f /usr/bin/rotorsync || -f /usr/local/bin/rotorsync ]] && [[ -f /etc/rotorsync.conf ]] ; then
		if [[ -f /usr/bin/rotorsync ]] ; then cp /usr/bin/rotorsync $HOME/rotorsync.sh 
		elif [[ -f /usr/local/bin/rotorsync ]] ; then cp "/usr/local/bin/rotorsync" $HOME/rotorsync.sh
		fi
		cp /etc/rotorsync.conf $HOME/rotorsync.conf
	fi
		exit 0
fi
f_dotrestore() {
	if [[ -b $DEV2 ]] ; then mount $DEV2 /mnt/home ; fi
	if [[ -d DOTFILES/$D_SOURCE ]] ; then 
		sleep 3 
		mkdir /mnt/home/dot.tmp/
		#this will need fixing in final release
		mv /mnt/home/*/.[^.]* /mnt/home/dot.tmp/
		rsync -aAXhvn 	DOTFILES/$D_SOURCE	 /mnt/home/$username/
	fi
}
f_linfo() {
cat <<EOF
		Select each partiton to label hit enter to continue to the next. Quit once they've 
	been selected. This must match your fstab partition layout.
EOF
}
if [[ $1 =~ --set-dev-labels ]] ; then 
	PS3="Select partition/s to label: "
	DEVCHOICES=( 'boot' '/' 'home' 'usr' 'var' 'Quit' )
	select Opts in ${DEVCHOICES[@]} ; do
		if [[ $Opts =~ Quit ]] ; then exit 0 
		elif [[ $Opts =~ boot ]] ; then e2label $(findmnt -rnuo SOURCE /boot ) $Opts
		elif [[ $Opts =~ / ]] ; then e2label $(findmnt -rnuo SOURCE / ) root
		elif [[ $Opts =~ home ]] ; then e2label $(findmnt -rnuo SOURCE /home ) $Opts
		elif [[ $Opts =~ usr ]] ; then e2label $(findmnt -rnuo SOURCE /usr ) $Opts
		elif [[ $Opts =~ var ]] ; then e2label $(findmnt -rnuo SOURCE /var ) $Opts
		fi
	done
	for mnts in ${DEVCHOICES[@]} ; do 
		if [[ $BACKUPTO != $(findmnt -rnuo SOURCE /$mnts) && $BACKUPTO != $(findmnt -rnuo SOURCE /) ]] && [[ -b $BACKUPTO ]] ; then e2label $BACKUPTO snapshots && break ; fi
	done
	exit 0
fi
if [[ $1 =~ --find ]] ; then
	labels=( snapshots root home usr var boot )
	for parts in ${labels[@]} ; do
		blkid -o device -t LABEL=$parts &> /dev/null &&  
		echo "$(blkid -o device -t LABEL=$parts)"
	done
	exit 0
fi
if [[ $1 =~ --recovery-menu ]] && [[ -d ROOT && -d DOTFILES ]] ; then
	MAIND=$PWD
	OPTYNQ="Yes No Quit"
	PS3="Do you wish to restore your root? "
	select Op1 in $OPTYNQ ; do
		if [[ $Op1 =~ Quit ]] ; then exit 0 ; fi
		if [[ $Op1 =~ No ]] ; then break ; fi
		if [[ $Op1 =~ Yes ]] ; then  
			PS3="Select root partition: "
			select DEV1 in /dev/sd[a-z][0-9] ; do
				if [[ -b $DEV1 ]] ; then
					if [[ ! -d /mnt/root ]] ; then mkdir /mnt/root ; fi
					R_DEV=$DEV1
				fi
				break 
			done
			cd ROOT 
			PS3="Select system restore-point: "
			select R_DIR in [0-9]*[0-9]/ ; do
				if [[ -d $R_DIR ]] ; then 
					R_SOURCE=$R_DIR
				fi
				break
			done
		fi 
		break
	done
	PS3="Do you wish to restore your dotfiles in /home/..? "
	select Op2 in $OPTYNQ ; do
		if [[ $Op2 =~ Quit ]] ; then exit 0 ; fi
		if [[ $Op2 =~ No ]] ; then 
			echo "rotorsync restore aborted"
			break 
		fi
		if [[ $Op2 =~ Yes ]] ; then  
			PS3="Select your home partition: "
			select DEV2 in /dev/sd[a-z][0-9] ; do
				if [[ -b $DEV2 ]] ; then
					if [[ ! -d /mnt/home ]] ; then mkdir /mnt/home ; fi
					H_DEV=$DEV2
				fi
				break
			done	
			cd .. && cd DOTFILES
			PS3="Select restore-point for .dotfiles: "
			select D_DIR in [0-9]*[0-9]/ ; do
				if [[ -d $D_DIR ]] ; then
					D_SOURCE=$D_DIR && cd ..
				else cd ..
				fi
				break
			done
		fi 
		break
	done	
	PS3="Are you sure you wish to continue?" 
	ACTIONS="rsync-optimized full-restore format-and-restore"
	f_methods
	select Op3 in $OPTYNQ ; do
		if [[ $Op3 =~ Quit ]] ; then exit 0 ; fi
		if [[ $Op3 =~ No ]] ; then echo "Aborted" && exit 0 ; fi
		if [[ $Op3 =~ Yes ]] ; then 
			f_methods
			select METHOD in $ACTIONS ; do
			  	if [[ $METHOD =~ rsync-optimized ]] ; then 
					if [[ -b $DEV1 ]] ; then mount $DEV1 /mnt/root ; fi
					if [[ -d ROOT/$R_SOURCE ]] ; then 
						sleep 3 
						rsync -aAXhvn --del ROOT/$R_SOURCE	/mnt/root/
					fi
					if [[ -b $DEV2 ]] ; then mount $DEV2 /mnt/home ; fi && f_dotrestore
				fi
			  	if [[ $METHOD =~ full-restore ]] ; then
					if [[ -b $DEV1 ]] ; then mount $DEV1 /mnt/root ; fi
					if [[ -d /mnt/root ]] ; then 
						cd /mnt/root
						rmdirs=( /* )		 
						for ndirs in ${rmdirs[@]} ; do
							if [[ $ndirs != /home && $ndirs != /lost+found ]] ; then rm -rfv $ndirs ; fi 
						done
						cd $MAIND 
						rsync -aAXhvn --del	ROOT/$R_SOURCE	/mnt/root/
					fi	
					if [[ -b $DEV2 ]] ; then mount $DEV2 /mnt/home ; fi && f_dotrestore
				fi
			  	if [[ $METHOD =~ format-and-restore ]] ; then 
					echo "This method isn't implemented yet"
				fi
				break	
			done	
			break
		fi
		break
	done	
#	break		
fi
if [[ -z "$BACKUPTO" || -z "$Username" ]] || [[ -z "$HOWMANY"  || -z "$HOWOFTEN" ]] ; then
	echo 'You MUST edit /etc/rotorsync.conf before running this script'
	exit 1
fi 
ISPATH=$(echo "$BACKUPTO" | cut -d '/' -f 2) 
if [[ -b $BACKUPTO ]] && [[ $ISPATH = dev && -z $MOUNTOPTS ]] ; then
	if [[ ! -d /mnt/snapshots ]] ; then mkdir /mnt/snapshots ; fi
	mount "$BACKUPTO" /mnt/snapshots/ & m1=$! 
	MNTPT="$BACKUPTO" && BACKUPTO=/mnt/snapshots && MNTDIR=$BACKUPTO
	if [[ -n $SUBDIR && ! -d /mnt/snashots/$SUBDIR ]] ; then mkdir "/mnt/snaphots/$SUBDIR" ; fi
	if [[ -n $SUBDIR && -d /mnt/snapshots/$SUBDIR ]] ; then BACKUPTO="/mnt/snapshots/$SUBDIR" ; fi
elif [[ -b $BACKUPTO || -h $BACKUPTO ]] && [[ $ISPATH = dev && -n $MOUNTOPTS ]] ; then
	if [[ ! -d /mnt/snapshots ]] ; then mkdir /mnt/snapshots ; fi
	mount "$MOUNTOPTS" "$BACKUPTO" /mnt/snapshots & m1=$!
	MNTPT=$BACKUPTO && BACKUPTO="/mnt/snapshots"
	if [[ -n $SUBDIR && ! -d /mnt/snapshots/$SUBDIR ]] ; then mkdir /mnt/snapshots/$SUBDIR ; fi
	if [[ -n $SUBDIR && -d /mnt/snapshots/$SUBDIR ]] ; then	BACKUPTO="/mnt/snapshots/$SUBDIR" 
	fi
fi &&
if [[ ! -d $BACKUPTO ]] ; then
	mkdir "$BACKUPTO" && cd "$BACKUPTO"
	if [[ ! -d ROOT ]] ; then mkdir ROOT/ ; fi
	if [[ ! -d DOTFILES ]] ; then mkdir DOTFILES/ ; fi
elif [[ -d $BACKUPTO  ]] ; then
	cd "$BACKUPTO" 
	if [[ ! -d ROOT ]] ; then mkdir ROOT/ ; fi
	if [[ ! -d DOTFILES ]] ; then mkdir DOTFILES/ ; fi
fi
cd DOTFILES

if [[ -f .xlist ]] ; then
	xlst=.xlist && cd ..
else
	f_xlst > .xlist
	xlst=.xlist && cd ..
fi
cd "$BACKUPTO"/ROOT
if [[ -f .rxlist ]] ; then
	rxlst=.rxlist && cd ..
else
	f_rxlst > .rxlist
#	echo '- var/cache/pacman/*'	>> .rxlist
	cd ..
fi

if [[ $1 =~ -f || $2 =~ -f ]] && [[ -n "$BOOTDELAY" ]] ; then BOOTDELAY=1 ; fi &&
if [[ -n "$BOOTDELAY" ]] ; then sleep "$BOOTDELAY" ; fi
N1="$HOWMANY" ; N2="$HOWOFTEN" ; opts="-aAXh --del"
if [[ $1 =~ -v || $2 =~ -v ]] ; then opts="-aAXhv --del" ; fi

touch --date="$(date -I -d "$N2 days ago") 00:01:00" .old
root=/		dotdirs=/home/"$Username"

if [[ .old -nt .lastrun || $1 =~ -f ]] ; then
	ionice -c3 -p $$ &> /dev/null
	renice +15 -p $$ &> /dev/null
	cd ROOT ; rdirs=( [0-9]*[0-9]/ ) ; rlnk="--link-dest="$PWD/${rdirs[-1]}""
	cd .. && cd DOTFILES ; ddirs=( [0-9]*[0-9]/ ) ; dlnk="--link-dest="$PWD/${ddirs[-1]}"" &&  cd ..
	if (( N1 >= 1 )) ; then cd ROOT 
		if (( N1 > 1)) && [[ -d ${rdirs[-1]} && ${rdirs[-1]} != $(date -I)/ ]] ; then
			rsync $opts --exclude-from=.rxlist "$rlnk"	$root	$(date -I)/ 
		elif [[ ${rdirs[-1]} != $(date -I)/ && ! -d $(date -I)/ ]] && [[ -d  ${rdirs[-1]} ]] ; then
			mv 	${rdirs[-1]} 	$(date -I)/
			rsync $opts --exclude-from=.rxlist $root	$(date -I)/
		elif [[ ${rdirs[-1]} = $(date -I)/ || ! -d ${rdirs[0]} ]] ; then
			rsync $opts --exclude-from=.rxlist $root	$(date -I)/
		fi ; cd .. && cd DOTFILES 
		if (( N1 > 1 )) && [[ -d ${ddirs[-1]} && ${ddirs[-1]} != $(date -I)/ ]] ; then
			rsync $opts --exclude-from=.xlist	"$dlnk"	$dotdirs/.[^.]*		$(date -I)/
		elif [[ ${ddirs[-1]} != $(date -I)/ && ! -d $(date -I)/ ]] && [[ -d ${ddirs[-1]} ]] ; then
			mv 	${ddirs[-1]} 	$(date -I)/ 
			rsync $opts --exclude-from=.xlist 	"$dotdirs"/.[^.]*	$(date -I)/
		elif [[ ${ddirs[-1]} = $(date -I)/ || ! -d ${ddirs[0]} ]] ; then
			rsync $opts --exclude-from=.xlist	"$dotdirs"/.[^.]*		$(date -I)/
		fi ; cd ..
	fi ; unset rdirs && unset ddirs 
	if [[ $1 =~ -v || $2 =~ -v ]] ; then rop="-rfv" else rop="-rf" ; fi
	cd ROOT 
	rdirs=( [0-9]*[0-9]/ ) ; drct1=$(( ${#rdirs[@]} - N1 ))
	if (( $drct1 <= 0 )) ; then drct1=0 ; fi
	if (( ${#rdirs[@]} > N1 ))  ; then 
		for xdirs1 in "${rdirs[@]:0:$drct1}" ; do 
			rm $rop "$xdirs1" 
		done
	fi
	cd .. && cd DOTFILES 
	ddirs=( [0-9]*[0-9]/ ) ; drct2=$(( ${#ddirs[@]} - N1 )) 
	if (( $drct2 <= 0 )) ; then drct2=0 ; fi
	if (( ${#ddirs[@]} > N1 )) ; then 
		for xdirs2 in "${ddirs[@]:0:$drct2}" ; do 
			rm $rop "$xdirs2"
		done
	fi
	cd .. && touch -d "$(date -I)" .lastrun 
else
	echo 'Rototrsync has already run recently'
fi
if [[ $PWD = /mnt/snapshots && $(findmnt -rno TARGET $BACKUPTO) = $MNTDIR ]] ; then
	cd / ; sleep 3 &&  umount /mnt/snapshots
fi
exit 0
